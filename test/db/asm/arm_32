a "addeq r1, r1, r0" 00108100
a "ands R2, r2" 022012e0
aB "addeq r1, r1, r2, lsl #2" 02118100
a "addne r1, r1, ip" 0c108110
aB "addne r1, r1, r0, lsl #2" 00118110
a "andeq r0, r0, 1" 01000002
aB "andeq r3, r5 -2147483648" 02310502
a "andne r3, r3, r2" 02300310
a "andne ip, ip, r7" 07c00c10
aB "asreq r0, ip, 31" cc0fa001
aB "asrne r0, r4, 31" c40fa011
a "beq 8" 0000000a
aB "biceq r3, r3, 7" 0730c303
a "blne 0x1900" 3e06001b
a "blx 0x1" fefffffa
a "blx 0x2" fefffffb
a "blx 0xa" 000000fb
a "blx 0xc" 010000fa
aB "bxeq Lr" 1eff2f01
aB "bxne Lr" 1eff2f11
aB "clzne r5, sl" 1a5f6f11
aB "cmpeq sl, r4" 40005a01
a "cmpne r7, r6" 06005711
a "eoreq r2, r2, 1" 01202202
a "eorne r0, r0, r3" 03002010
aB "eorne r0, r0, r3, lsr #24" 230c2010
a "eors R2, r2" 022032e0
aB "ldmdbeQ r2, {r0, r1}" 03001209
aB "ldmeq r3, {r0, r1, r2, r3}" 0f009308
aB "ldmeq r5, {r0, r1, r2}" 07009508
aB "ldmeq r6, {r0, r1}" 03009608
aB "ldrbeq r5, [r7, -1]" 01505705
aB "ldrne r2, [r3, ip]" dc208311
aB "ldreq r0, [fp, -180]" b4001b05
aB "ldrheq r0, [r3, r0]" b0009301
aB "ldrex r0, [r3]" 9f0f93e1
aB "lslne r1, r1, 2" 0111a011
aB "lsreq r0, r0, 16" 2008a001
aB "lsrne r0, r0, 9" a004a011
aB "mlaeq r7, r5, r7, r0" 95072700
aB "mlane r3, r1, r3, r2" 91232310
a "moveq r0, sl" 0a00a001
a "movne r0, r9" 0900a011
aB "mulne r3, r3, r0" 93000310
a "mul r2, r3, r4" 930402e0
a "mul r6, r2" 960206e0
a "smull r4, r1, r2, r3" 9243c1e0
a "smlal r4, r1, r2, r3" 9243e1e0
a "smlabb r4, r7, r3, r1" 871304e1
a "smlabt r4, r7, r3, r1" c71304e1
a "smlatb r4, r7, r3, r1" a71304e1
a "smlatt r4, r7, r3, r1" e71304e1
a "mvneq r0, 21" 1500e003
a "mvneq r0, -2147483648" 0201e003
a "orreq r5, r5, r3" 03508501
aB "orreq r6, r6, r2, lsr #1" a2608601
aB "orreq r3, r3, -2147483648" 02318303
aB "orrne r0, r0, r1, lsl ip" 110c8011
a "orrne r1, r1, r3" 03108111
a "orrs R2, r2" 022092e1
aB "popeq {pc} ; (LDREQQ pc, [sp], 4)" 04f09d04
a "popeq {r4, pc}" 1080bd08
a "popeq {r4, r5, pc}" 3080bd08
a "popeq {r3, r4, r5, pc}" 3880bd08
a "popeq {r4, r5, r6, r7, pc}" f080bd08
a "popeq {r3, r4, r5, r6, r7, pc}" f880bd08
a "popeq {r3, r4, r5, r6, r7, r8, sl, pc}" f885bd08
a "popeq {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}" f88fbd08
aB "reveq r3, r3" 333fbf06
a "rsbeq ip, r1, r7" 07c06100
a "rsbne r6, r0, r6" 06606010
aB "stmeq r0, {r2, r3}" 0c008008
aB "stmeq ip, {r0, r1, r2}" 07008c08
aB "stmeq ip, {r0, r1, r2, r3}" 0f008c08
aB "strbeq ip, [r2, -1]" 01c04205
aB "strbeq r3, [r5]" 0030c505
aB "strdeq r2, [r4]" f020c401
aB "strdeq r4, [r8, 80]" f045c801
aB "streq r3, [r5, -4]" 04300505
aB "streq r1, [fp, -304]" 30110b05
aB "strhne r3, [fp, -50]" b2334b11
aB "strheq r3, [fp, -56]" b8334b01
aB "strheq r1, [r0]" b010c001
aB "strhne r1, [r2,r3]" b3108211
a "strex r1, r2, [r5]" 921f85e1
a "subeq ip, r0, 32" 20c04002
aB "subne r6, r3, r6, asr 1" c6604310
a "subne r5, r5, r3" 03504510
a "svceq 0x00000000" 0000000f
aB "umlalnE r4, r5, r3, r7" 9347a510
aB "uxtbeq r1, r0" 7010ef06
aB "uxtheq r0, r0" 7000ff06
aB "vstreq d0, [r0]" 000b800d
a "ldr r1, [r2, r3]" 031092e7
aB "ldr r1, [r2, r3, lsl 2]" 031192e7
aB "ldr r1, [r2, r3, lsr 5]" a31292e7
aB "ldr r1, [r2, r3, asr 6]" 431392e7
aB "ldr r1, [r2, r3, ror 9]" e31492e7
a "mrc p5, 1, r4, c2, c4, 6" d44532ee
a "mrc p4, 4, r5, c2, c2" 125492ee
a "mrc p3, 0, r5, c3, c5, 6" d55313ee
a "bic r1, r2, r3" 0310c2e1
a "bic r3, r2" 0230c3e1
ad "strb r2, [r3, r4]" 0420c3e7 0x0 (store 0 (+ (var r3) (var r4)) (cast 8 false (var r2)))
ad "strb r2, [r3, 6]" 0620c3e5 0x0 (store 0 (+ (var r3) (bv 32 0x6)) (cast 8 false (var r2)))
a "strbt r3, [r7]" 0030e7e4
a "strbt r1, [r2]" 0010e2e4
a "strd r6, r7, [r7, 86]" f665c7e1
a "strd r2, r3, [r3]" f020c3e1
a "strexb r2, r5, [r6]" 952fc6e1
a "strexb r5, r2, [r4]" 925fc4e1
a "strexh r2, r5, [r6]" 952fe6e1
a "strexh r5, r2, [r4]" 925fe4e1
ad "strh r5, [r2, r4]" b45082e1 0x0 (storew 0 (+ (var r2) (var r4)) (cast 16 false (var r5)))
aB "strxh r5, [r2, 4]" b450c2e1
d "addeq r1, r1, r0" 00108100 0x0 (branch (var zf) (set r1 (+ (var r1) (var r0))) nop)
d "addeq r1, r1, r2, lsl 2" 02118100
d "addne r1, r1, ip" 0c108110 0x0 (branch (! (var zf)) (set r1 (+ (var r1) (var r12))) nop)
d "addne r1, r1, r0, lsl 2" 00118110
ad "add pc, pc, 0x10" 10f08fe2 0x200 (jmp (+ (bv 32 0x208) (bv 32 0x10)))
ad "adc r0, r1, 0x2a" 2a00a1e2 0x0 (set r0 (+ (+ (var r1) (bv 32 0x2a)) (ite (var cf) (bv 32 0x1) (bv 32 0x0))))
d "adcs r0, r1, 0x2a" 2a00b1e2 0x0 (seq (set a (var r1)) (set b (bv 32 0x2a)) (set r0 (+ (+ (var r1) (bv 32 0x2a)) (ite (var cf) (bv 32 0x1) (bv 32 0x0)))) (set cf (msb (+ (+ (cast 33 false (var a)) (cast 33 false (var b))) (ite (var cf) (bv 33 0x1) (bv 33 0x0))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r0))))) (set zf (is_zero (var r0))) (set nf (msb (var r0))))
ad "adds r0, r1, 0x2a" 2a0091e2 0x0 (seq (set a (var r1)) (set b (bv 32 0x2a)) (set r0 (+ (var r1) (bv 32 0x2a))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r0))))) (set zf (is_zero (var r0))) (set nf (msb (var r0))))
d "sub sp, sp, 0x1c" 1cd04de2 0x0 (set sp (- (var sp) (bv 32 0x1c)))
d "sub r6, r7, r5" 056047e0 0x0 (set r6 (- (var r7) (var r5)))
d "subs r6, r7, r5" 056057e0 0x0 (seq (set a (var r7)) (set b (var r5)) (set r6 (- (var r7) (var r5))) (set cf (&& (ule (var a) (var b)) (! (== (var a) (var b))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var r6))))) (set zf (is_zero (var r6))) (set nf (msb (var r6))))
d "andeq r0, r0, 1" 01000002
d "andeq r3, r5, 0x80000000" 02310502
d "andne r3, r3, r2" 02300310
d "andne ip, ip, r7" 07c00c10
d "asreq r0, ip, 0x1f" cc0fa001
d "asrne r0, r4, 0x1f" c40fa011
d "beq 8" 0000000a 0x0 (branch (var zf) (jmp (bv 32 0x8)) nop)
d "biceq r3, r3, 7" 0730c303
d "blne 0x1900" 3E06001B
d "bl 0x1900" 3e0600eb
d "b 0x1900" 3e0600ea 0x0 (jmp (bv 32 0x1900))
d "b 0x2900" 3e0600ea 0x1000 (jmp (bv 32 0x2900))
d "beq 0x1900" 3e06000a 0x0 (branch (var zf) (jmp (bv 32 0x1900)) nop)
d "bne 0x1900" 3e06001a 0x0 (branch (! (var zf)) (jmp (bv 32 0x1900)) nop)
d "bhs 0x1900" 3e06002a 0x0 (branch (var cf) (jmp (bv 32 0x1900)) nop)
d "blo 0x1900" 3e06003a 0x0 (branch (! (var cf)) (jmp (bv 32 0x1900)) nop)
d "bmi 0x1900" 3e06004a 0x0 (branch (var nf) (jmp (bv 32 0x1900)) nop)
d "bpl 0x1900" 3e06005a 0x0 (branch (! (var nf)) (jmp (bv 32 0x1900)) nop)
d "bvs 0x1900" 3e06006a 0x0 (branch (var vf) (jmp (bv 32 0x1900)) nop)
d "bvc 0x1900" 3e06007a 0x0 (branch (! (var vf)) (jmp (bv 32 0x1900)) nop)
d "bhi 0x1900" 3e06008a 0x0 (branch (&& (var cf) (! (var zf))) (jmp (bv 32 0x1900)) nop)
d "bls 0x1900" 3e06009a 0x0 (branch (&& (! (var cf)) (var zf)) (jmp (bv 32 0x1900)) nop)
d "bge 0x1900" 3e0600aa 0x0 (branch (! (^^ (var nf) (var vf))) (jmp (bv 32 0x1900)) nop)
d "blt 0x1900" 3e0600ba 0x0 (branch (^^ (var nf) (var vf)) (jmp (bv 32 0x1900)) nop)
d "bgt 0x1900" 3e0600ca 0x0 (branch (&& (! (var zf)) (! (^^ (var nf) (var vf)))) (jmp (bv 32 0x1900)) nop)
d "ble 0x1900" 3e0600da 0x0 (branch (&& (var zf) (^^ (var nf) (var vf))) (jmp (bv 32 0x1900)) nop)
d "b 0x1900" 3e0600ea 0x0 (jmp (bv 32 0x1900))
d "bxeq lr" 1eff2f01
d "bxne lr" 1eff2f11
d "clzne r5, sl" 1a5f6f11
d "cmpeq sl, r0, asr 32" 40005a01
d "cmpne r7, r6" 06005711
d "eoreq r2, r2, 1" 01202202
d "eorne r0, r0, r3" 03002010
d "eorne r0, r0, r3, lsr 24" 230c2010
d "ldmdbeq r2, {r0, r1}" 03001209
d "ldmeq r3, {r0, r1, r2, r3}" 0f009308
d "ldmeq r5, {r0, r1, r2}" 07009508
d "ldmeq r6, {r0, r1}" 03009608
d "ldrbeq r5, [r7, -1]" 01505705
d "ldrdne r2, r3, [r3, ip]" dc208311
d "ldreq r0, [fp, -0xb4]" b4001b05
d "ldrheq r0, [r3, r0]" b0009301
d "lslne r1, r1, 2" 0111a011
d "lsreq r0, r0, 0x10" 2008a001
d "lsrne r0, r0, 9" a004a011
d "mlaeq r7, r5, r7, r0" 95072700
d "mlane r3, r1, r3, r2" 91232310
d "moveq r0, sl" 0a00a001
d "movne r0, sb" 0900a011
d "mulne r3, r3, r0" 93000310
d "mvneq r0, 0x15" 1500e003
d "mvneq r0, 0x80000000" 0201e003
d "orreq r5, r5, r3" 03508501
d "orreq r6, r6, r2, lsr 1" a2608601
d "orreq r3, r3, 0x80000000" 02318303
d "orrne r0, r0, r1, lsl ip" 110c8011
d "orrne r1, r1, r3" 03108111
d "popeq {pc}" 04f09d04
d "popeq {r4, pc}" 1080bd08
d "popeq {r4, r5, pc}" 3080bd08
d "popeq {r3, r4, r5, pc}" 3880bd08
d "popeq {r4, r5, r6, r7, pc}" f080bd08
d "popeq {r3, r4, r5, r6, r7, pc}" f880bd08
d "popeq {r3, r4, r5, r6, r7, r8, sl, pc}" f885bd08
d "popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}" f88fbd08
d "reveq r3, r3" 333fbf06
d "rsbeq ip, r1, r7" 07c06100
d "rsbne r6, r0, r6" 06606010
d "stmeq r0, {r2, r3}" 0c008008
d "stmeq ip, {r0, r1, r2}" 07008c08
d "stmeq ip, {r0, r1, r2, r3}" 0f008c08
d "strbeq ip, [r2, -1]" 01c04205
d "strbeq r3, [r5]" 0030c505
d "strdeq r2, r3, [r4]" f020c401
d "strdeq r4, r5, [r8, 0x50]" f045c801
d "streq r3, [r5, -4]" 04300505
d "streq r1, [fp, -0x130]" 30110b05
d "strhne r3, [fp, -0x32]" b2334b11
d "strheq r3, [fp, -0x38]" b8334b01
d "strheq r1, [r0]" b010c001
d "strhne r1, [r2, r3]" b3108211
d "subeq ip, r0, 0x20" 20c04002
d "subne r6, r3, r6, asr 1" c6604310
d "subne r5, r5, r3" 03504510
d "svceq 0" 0000000f
d "umlalne r4, r5, r3, r7" 9347a510
d "uxtbeq r1, r0" 7010ef06
d "uxtheq r0, r0" 7000ff06
d "vstreq d0, [r0]" 000b800d
d "blne 0x1900" 8374211b 0xff7a46ec
ad "mov r0, 0x2a" 2a00a0e3 0x0 (set r0 (bv 32 0x2a))
ad "movs r1, 0" 0010b0e3 0x0 (seq (set r1 (bv 32 0x0)) (set zf (is_zero (bv 32 0x0))) (set nf (msb (bv 32 0x0))))
d "movs r1, 0, 2" 0011b0e3 0x0 (seq (set r1 (bv 32 0x0)) (set cf false) (set zf (is_zero (bv 32 0x0))) (set nf (msb (bv 32 0x0))))
d "movs r1, 1, 30" 011fb0e3 0x0 (seq (set r1 (bv 32 0x1)) (set cf false) (set zf (is_zero (bv 32 0x1))) (set nf (msb (bv 32 0x1))))
d "movs r1, 4" 0410b0e3 0x0 (seq (set r1 (bv 32 0x4)) (set zf (is_zero (bv 32 0x4))) (set nf (msb (bv 32 0x4))))
d "movs r1, 0x40000000" 0111b0e3 0x0 (seq (set r1 (bv 32 0x40000000)) (set cf false) (set zf (is_zero (bv 32 0x40000000))) (set nf (msb (bv 32 0x40000000))))
d "movs r1, 0x80000000" 0211b0e3 0x0 (seq (set r1 (bv 32 0x80000000)) (set cf true) (set zf (is_zero (bv 32 0x80000000))) (set nf (msb (bv 32 0x80000000))))
ad "movs r0, 0x2a" 2a00b0e3 0x0 (seq (set r0 (bv 32 0x2a)) (set zf (is_zero (bv 32 0x2a))) (set nf (msb (bv 32 0x2a))))
ad "mov pc, 0x2a" 2af0a0e3 0x0 (jmp (bv 32 0x2a))
ad "movs pc, 0x2a" 2af0b0e3
ad "mov r1, r6" 0610a0e1 0x0 (set r1 (var r6))
ad "movs r1, r6" 0610b0e1 0x0 (seq (set r1 (var r6)) (set zf (is_zero (var r6))) (set nf (msb (var r6))))
ad "movw r3, 0x1034" 343001e3 0x0 (set r3 (bv 32 0x1034))
ad "movt r3, 2" 023040e3 0x0 (set r3 (append (bv 16 0x2) (cast 16 false (var r3))))
aB "addeq r1, r1, r2, lsl 2" 02118100
a "addne r1, r1, ip" 0c108110
aB "addne r1, r1, r0, lsl 2" 00118110
a "andeq r0, r0, 1" 01000002
aB "andeq r3, r5, 0x80000000" 02310502
a "andne r3, r3, r2" 02300310
a "andne ip, ip, r7" 07c00c10
aB "asreq r0, ip, 0x1f" cc0fa001
aB "asrne r0, r4, 0x1f" c40fa011
aB "biceq r3, r3, 7" 0730c303
aB "blne 0x1900" 3E06001B
a "bl 0x1900" 3e0600eb
a "b 0x1900" 3e0600ea
aB "bxeq lr" 1eff2f01
aB "bxne lr" 1eff2f11
aB "clzne r5, sl" 1a5f6f11
aB "cmpeq sl, r0, asr 32" 40005a01
a "cmpne r7, r6" 06005711
a "eoreq r2, r2, 1" 01202202
a "eorne r0, r0, r3" 03002010
aB "eorne r0, r0, r3, lsr 24" 230c2010
aB "ldmdbeq r2, {r0, r1}" 03001209
aB "ldmeq r3, {r0, r1, r2, r3}" 0f009308
aB "ldmeq r5, {r0, r1, r2}" 07009508
aB "ldmeq r6, {r0, r1}" 03009608
aB "ldrbeq r5, [r7, -1]" 01505705
aB "ldrdne r2, r3, [r3, ip]" dc208311
aB "ldreq r0, [fp, -0xb4]" b4001b05
aB "ldrheq r0, [r3, r0]" b0009301
aB "lslne r1, r1, 2" 0111a011
aB "lsreq r0, r0, 0x10" 2008a001
aB "lsrne r0, r0, 9" a004a011
aB "mlaeq r7, r5, r7, r0" 95072700
aB "mlane r3, r1, r3, r2" 91232310
aB "movne r0, sb" 0900a011
aB "mulne r3, r3, r0" 93000310
a "mvneq r0, 0x15" 1500e003
a "mvneq r0, 0x80000000" 0201e003
a "orreq r5, r5, r3" 03508501
aB "orreq r6, r6, r2, lsr 1" a2608601
aB "orreq r3, r3, 0x80000000" 02318303
aB "orrne r0, r0, r1, lsl ip" 110c8011
a "orrne r1, r1, r3" 03108111
aB "popeq {pc}" 04f09d04
a "popeq {r4, pc}" 1080bd08
a "popeq {r4, r5, pc}" 3080bd08
a "popeq {r3, r4, r5, pc}" 3880bd08
a "popeq {r4, r5, r6, r7, pc}" f080bd08
a "popeq {r3, r4, r5, r6, r7, pc}" f880bd08
a "popeq {r3, r4, r5, r6, r7, r8, sl, pc}" f885bd08
aB "popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}" f88fbd08
aB "reveq r3, r3" 333fbf06
a "rsbeq ip, r1, r7" 07c06100
a "rsbne r6, r0, r6" 06606010
aB "stmeq r0, {r2, r3}" 0c008008
aB "stmeq ip, {r0, r1, r2}" 07008c08
aB "stmeq ip, {r0, r1, r2, r3}" 0f008c08
aB "strbeq ip, [r2, -1]" 01c04205
aB "strbeq r3, [r5]" 0030c505
aB "strdeq r2, r3, [r4]" f020c401
aB "strdeq r4, r5, [r8, 0x50]" f045c801
aB "streq r3, [r5, -4]" 04300505
aB "streq r1, [fp, -0x130]" 30110b05
aB "strhne r3, [fp, -0x32]" b2334b11
aB "strheq r3, [fp, -0x38]" b8334b01
aB "strheq r1, [r0]" b010c001
aB "strhne r1, [r2, r3]" b3108211
a "subeq ip, r0, 0x20" 20c04002
aB "subne r6, r3, r6, asr 1" c6604310
a "subne r5, r5, r3" 03504510
a "svceq 0" 0000000f
aB "umlalne r4, r5, r3, r7" 9347a510
aB "uxtbeq r1, r0" 7010ef06
aB "uxtheq r0, r0" 7000ff06
aB "vstreq d0, [r0]" 000b800d
a "lsr r0, r1, r3" 3103a0e1
a "lsl r2, r8, r5" 1825a0e1
a "asr r4, r5, r0" 5540a0e1
a "ror r7, r6, r1" 7671a0e1
a "ldr r0, [r0]" 000090e5
a "ldr r1, [r2]" 001092e5
ad "str r0, [r0]" 000080e5 0x0 (storew 0 (var r0) (var r0))
ad "str r1, [r2]" 001082e5 0x0 (storew 0 (var r2) (var r1))
d "ldr r2, [fp, -0xc]" 0c201be5 0x200 (set r2 (loadw 0 32 (- (var r11) (bv 32 0xc))))
ad "ldr r1, [r7]" 001097e5 0x200 (set r1 (loadw 0 32 (var r7)))
ad "ldr pc, [r8]" 00f098e5 0x200 (jmp (loadw 0 32 (var r8)))
d "ldr r1, [r2, r3]" 031092e7 0x200 (set r1 (loadw 0 32 (+ (var r2) (var r3))))
d "ldr r1, [r2, r3, lsl 4]" 031292e7 0x200 (set r1 (loadw 0 32 (+ (var r2) (<< (var r3) (bv 5 0x4) false))))
d "ldr r0, [r1, r4, lsr 5]" a40291e7 0x0 (set r0 (loadw 0 32 (+ (var r1) (>> (var r4) (bv 5 0x5) false))))
d "ldr r0, [r1, r4, asr 5]" c40291e7 0x0 (set r0 (loadw 0 32 (+ (var r1) (>> (var r4) (bv 5 0x5) (msb (var r4))))))
d "ldr r0, [r1, r4, ror 5]" e40291e7 0x0 (set r0 (loadw 0 32 (+ (var r1) (| (>> (var r4) (bv 5 0x5) false) (<< (var r4) (bv 5 0x1b) false)))))
d "ldr r0, [r1, r4, rrx]" 640091e7 0x0 (set r0 (loadw 0 32 (+ (var r1) (>> (var r4) (bv 5 0x1) (var cf)))))
d "ldrb r2, [r3]" 0020d3e5 0x0 (set r2 (cast 32 false (load 0 (var r3))))
d "ldrh r0, [r1]" b000d1e1 0x0 (set r0 (cast 32 false (loadw 0 16 (var r1))))
d "ldr r6, [pc, 0x48]" 48609fe5 0x10660 (set r6 (loadw 0 32 (+ (bv 32 0x10668) (bv 32 0x48))))
d "ldr r2, [fp, -0x10]!" 10203be5 0x0 (seq (set r11 (- (var r11) (bv 32 0x10))) (set r2 (loadw 0 32 (var r11))))
d "ldr r0, [r1], 4" 040091e4 0x0 (seq (set r0 (loadw 0 32 (var r1))) (set r1 (+ (var r1) (bv 32 0x4))))
d "ldrt r0, [r1], 0" 0000b1e4 0x0 (seq (set r0 (loadw 0 32 (var r1))) (set r1 (+ (var r1) (bv 32 0x0))))
d "ldrt r0, [r1], 4" 0400b1e4 0x0 (seq (set r0 (loadw 0 32 (var r1))) (set r1 (+ (var r1) (bv 32 0x4))))
d "ldrbt r0, [r1], 4" 0400f1e4 0x0 (seq (set r0 (cast 32 false (load 0 (var r1)))) (set r1 (+ (var r1) (bv 32 0x4))))
d "ldrht r0, [r1], 4" b400f1e0 0x0 (seq (set r0 (cast 32 false (loadw 0 16 (var r1)))) (set r1 (+ (var r1) (bv 32 0x4))))
d "ldr pc, [r1], 4" 04f091e4 0x0 (seq (set tgt (loadw 0 32 (var r1))) (set r1 (+ (var r1) (bv 32 0x4))) (jmp (var tgt)))
d "ldr pc, [r1], -4" 04f011e4 0x0 (seq (set tgt (loadw 0 32 (var r1))) (set r1 (- (var r1) (bv 32 0x4))) (jmp (var tgt)))
d "ldr pc, [r1, 4]" 04f091e5 0x0 (jmp (loadw 0 32 (+ (var r1) (bv 32 0x4))))
d "ldr pc, [r1, 4]!" 04f0b1e5 0x0 (seq (set r1 (+ (var r1) (bv 32 0x4))) (jmp (loadw 0 32 (var r1))))
d "ldr pc, [r1, -8]" 08f011e5 0x0 (jmp (loadw 0 32 (- (var r1) (bv 32 0x8))))
d "ldr pc, [r1, -8]!" 08f031e5 0x0 (seq (set r1 (- (var r1) (bv 32 0x8))) (jmp (loadw 0 32 (var r1))))
d "str fp, [sp, -4]!" 04b02de5 0x0 (seq (set sp (- (var sp) (bv 32 0x4))) (storew 0 (var sp) (var r11)))
d "str fp, [sp], 4" 04b08de4 0x0 (seq (storew 0 (var sp) (var r11)) (set sp (+ (var sp) (bv 32 0x4))))
d "str fp, [sp], -4" 04b00de4 0x0 (seq (storew 0 (var sp) (var r11)) (set sp (- (var sp) (bv 32 0x4))))
d "strt fp, [sp], -4" 04b02de4 0x0 (seq (storew 0 (var sp) (var r11)) (set sp (- (var sp) (bv 32 0x4))))
d "strt fp, [sp], 4" 04b0ade4 0x0 (seq (storew 0 (var sp) (var r11)) (set sp (+ (var sp) (bv 32 0x4))))
d "strbt fp, [sp], 4" 04b0ede4 0x0 (seq (store 0 (var sp) (cast 8 false (var r11))) (set sp (+ (var sp) (bv 32 0x4))))
d "strht fp, [sp], 4" b4b0ede0 0x0 (seq (storew 0 (var sp) (cast 16 false (var r11))) (set sp (+ (var sp) (bv 32 0x4))))
d "eor r4, r3, r2" 024023e0 0x0 (set r4 (^ (var r3) (var r2)))
d "eor r4, r3, 3" 034023e2 0x0 (set r4 (^ (var r3) (bv 32 0x3)))
d "eors r4, r3, 3" 034033e2 0x0 (seq (set r4 (^ (var r3) (bv 32 0x3))) (set zf (is_zero (var r4))) (set nf (msb (var r4))))
d "eors r4, r3, 0x30000" 034833e2 0x0 (seq (set r4 (^ (var r3) (bv 32 0x30000))) (set cf false) (set zf (is_zero (var r4))) (set nf (msb (var r4))))
d "eors r3, r3, 0x30000" 033833e2 0x0 (seq (set r3 (^ (var r3) (bv 32 0x30000))) (set cf false) (set zf (is_zero (var r3))) (set nf (msb (var r3))))
d "eors r3, r3, 0x80000000" 023133e2 0x0 (seq (set r3 (^ (var r3) (bv 32 0x80000000))) (set cf true) (set zf (is_zero (var r3))) (set nf (msb (var r3))))
d "uxtb r1, r3" 7310efe6 0x0 (set r1 (cast 32 false (cast 8 false (var r3))))
d "uxtb r1, r3, ror 8" 7314efe6 0x0 (set r1 (cast 32 false (cast 8 false (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false)))))
d "uxth r1, r3" 7310ffe6 0x0 (set r1 (cast 32 false (cast 16 false (var r3))))
d "uxth r1, r3, ror 8" 7314ffe6 0x0 (set r1 (cast 32 false (cast 16 false (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false)))))
d "uxtab r1, r2, r3" 7310e2e6 0x0 (set r1 (+ (var r2) (cast 32 false (cast 8 false (var r3)))))
d "uxtab r1, r2, r3, ror 8" 7314e2e6 0x0 (set r1 (+ (var r2) (cast 32 false (cast 8 false (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false))))))
d "uxtah r1, r2, r3" 7310f2e6 0x0 (set r1 (+ (var r2) (cast 32 false (cast 16 false (var r3)))))
d "uxtah r1, r2, r3, ror 8" 7314f2e6 0x0 (set r1 (+ (var r2) (cast 32 false (cast 16 false (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false))))))
d "uxtb16 r1, r3" 7310cfe6 0x0 (set r1 (let x (var r3) (append (cast 16 false (cast 8 false (>> (var x) (bv 5 0x10) false))) (cast 16 false (cast 8 false (var x))))))
d "uxtb16 r1, r3, ror 8" 7314cfe6 0x0 (set r1 (let x (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false)) (append (cast 16 false (cast 8 false (>> (var x) (bv 5 0x10) false))) (cast 16 false (cast 8 false (var x))))))
d "uxtab16 r1, r2, r3" 7310c2e6 0x0 (set r1 (let x (var r3) (append (+ (cast 16 false (>> (var r2) (bv 5 0x10) false)) (cast 16 false (cast 8 false (>> (var x) (bv 5 0x10) false)))) (+ (cast 16 false (var r2)) (cast 16 false (cast 8 false (var x)))))))
d "uxtab16 r1, r2, r3, ror 8" 7314c2e6 0x0 (set r1 (let x (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false)) (append (+ (cast 16 false (>> (var r2) (bv 5 0x10) false)) (cast 16 false (cast 8 false (>> (var x) (bv 5 0x10) false)))) (+ (cast 16 false (var r2)) (cast 16 false (cast 8 false (var x)))))))
d "cmp r1, 0x42" 420051e3 0x0 (seq (set a (var r1)) (set b (bv 32 0x42)) (set res (- (var a) (var b))) (set cf (&& (ule (var a) (var b)) (! (== (var a) (var b))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "cmn r1, 0x42" 420071e3 0x0 (seq (set a (var r1)) (set b (bv 32 0x42)) (set res (+ (var a) (var b))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "cmp r1, r3" 030051e1 0x0 (seq (set a (var r1)) (set b (var r3)) (set res (- (var a) (var b))) (set cf (&& (ule (var a) (var b)) (! (== (var a) (var b))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "cmn r1, r3" 030071e1 0x0 (seq (set a (var r1)) (set b (var r3)) (set res (+ (var a) (var b))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "cmp r1, r3, ror 8" 630451e1 0x0 (seq (set a (var r1)) (set b (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false))) (set res (- (var a) (var b))) (set cf (&& (ule (var a) (var b)) (! (== (var a) (var b))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "cmn r1, r3, ror 8" 630471e1 0x0 (seq (set a (var r1)) (set b (| (>> (var r3) (bv 5 0x8) false) (<< (var r3) (bv 5 0x18) false))) (set res (+ (var a) (var b))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var res))))) (set zf (is_zero (var res))) (set nf (msb (var res))))
d "str pc, [sp, -4]!" 04f02de5 0x200 (seq (set sp (- (var sp) (bv 32 0x4))) (storew 0 (var sp) (bv 32 0x208)))
d "str r3, [sp, -4]!" 04302de5 0x0 (seq (set sp (- (var sp) (bv 32 0x4))) (storew 0 (var sp) (var r3)))
d "push {fp, lr}" 00482de9 0x0 (seq (storew 0 (- (var sp) (bv 32 0x8)) (var r11)) (storew 0 (- (var sp) (bv 32 0x4)) (var lr)) (set sp (- (var sp) (bv 32 0x8))))
d "push {r4, r5, r6, r7, r8, sb, sl, lr}" f0472de9 0x0 (seq (storew 0 (- (var sp) (bv 32 0x20)) (var r4)) (storew 0 (- (var sp) (bv 32 0x1c)) (var r5)) (storew 0 (- (var sp) (bv 32 0x18)) (var r6)) (storew 0 (- (var sp) (bv 32 0x14)) (var r7)) (storew 0 (- (var sp) (bv 32 0x10)) (var r8)) (storew 0 (- (var sp) (bv 32 0xc)) (var r9)) (storew 0 (- (var sp) (bv 32 0x8)) (var r10)) (storew 0 (- (var sp) (bv 32 0x4)) (var lr)) (set sp (- (var sp) (bv 32 0x20))))
d "stmdb r0, {r1, r3, r4}" 1a0000e9 0x0 (seq (storew 0 (- (var r0) (bv 32 0xc)) (var r1)) (storew 0 (- (var r0) (bv 32 0x8)) (var r3)) (storew 0 (- (var r0) (bv 32 0x4)) (var r4)))
d "stmdb r0!, {r1, r3, r4}" 1a0020e9 0x0 (seq (storew 0 (- (var r0) (bv 32 0xc)) (var r1)) (storew 0 (- (var r0) (bv 32 0x8)) (var r3)) (storew 0 (- (var r0) (bv 32 0x4)) (var r4)) (set r0 (- (var r0) (bv 32 0xc))))
d "pop {fp}" 04b09de4 0x0 (seq (set r11 (loadw 0 32 (+ (var sp) (bv 32 0x0)))) (set sp (+ (var sp) (bv 32 0x4))))
d "pop {r3, pc}" 0880bde8 0x0 (seq (set r3 (loadw 0 32 (+ (var sp) (bv 32 0x0)))) (set tgt (loadw 0 32 (+ (var sp) (bv 32 0x4)))) (set sp (+ (var sp) (bv 32 0x8))) (jmp (var tgt)))
d "ldm r0, {r1, r3, r4}" 1a0090e8 0x0 (seq (set r1 (loadw 0 32 (+ (var r0) (bv 32 0x0)))) (set r3 (loadw 0 32 (+ (var r0) (bv 32 0x4)))) (set r4 (loadw 0 32 (+ (var r0) (bv 32 0x8)))))
d "ldm r0!, {r1, r3, r4}" 1a00b0e8 0x0 (seq (set r1 (loadw 0 32 (+ (var r0) (bv 32 0x0)))) (set r3 (loadw 0 32 (+ (var r0) (bv 32 0x4)))) (set r4 (loadw 0 32 (+ (var r0) (bv 32 0x8)))) (set r0 (+ (var r0) (bv 32 0xc))))
d "bx lr" 1eff2fe1 0x0 (jmp (var lr))
d "blx 0xa" 000000fb 0x0 (seq (set lr (bv 32 0x4)) (jmp (bv 32 0xa)))
d "bl 0x100" 3e0000eb 0x0 (seq (set lr (bv 32 0x4)) (jmp (bv 32 0x100)))
